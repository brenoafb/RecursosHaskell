-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsLI where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = Prog [Function]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = Fun Type Ident [Decl] [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Dec Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SDec Decl
    | SAss Ident Exp
    | SBlock [Stm]
    | SWhile Exp Stm
    | SReturn Exp
    | SIf Exp Stm Stm
    | SRepeat Stm Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EOr Exp Exp
    | EAnd Exp Exp
    | ENot Exp
    | ECon Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | Call Ident [Exp]
    | EInt Integer
    | EVar Ident
    | EStr String
    | ETrue
    | EFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tint | Tvoid | TStr | TFun Function
  deriving (C.Eq, C.Ord, C.Show, C.Read)

