Prog. Program  ::= [Function] ;

Fun.  Function ::= Type Ident "(" [Decl] ")" "{" [Stm] "}" ;

Dec. Decl ::= Type Ident ;

comment "//" ;
comment "/*" "*/" ;

terminator Stm "" ;
terminator Function "" ;
separator  Decl "," ;
separator  Exp "," ;

SDec.    Stm ::= Decl ";" ;
SAss.    Stm ::= Ident "=" Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SReturn. Stm ::= "return" Exp  ";" ;
SIf.     Stm ::= "if" "(" Exp ")" "then" Stm "else" Stm ;
SRepeat. Stm ::= "repeat" Stm "until" "(" Exp ")" ";" ;

EOr.  Exp1 ::= Exp1 "||" Exp2 ;
EAnd. Exp2 ::= Exp2 "&&" Exp3 ;
ENot. Exp3 ::= "!" Exp3 ;
ECon. Exp4  ::= Exp4  "++" Exp5 ;
EAdd. Exp4  ::= Exp4  "+" Exp5 ;
ESub. Exp4  ::= Exp4  "-" Exp5 ;
EMul. Exp5  ::= Exp5 "*" Exp6 ;
EDiv. Exp5  ::= Exp5 "/" Exp6 ;
Call. Exp6  ::= Ident "(" [Exp] ")" ;
EInt. Exp7  ::= Integer ;
EVar. Exp7  ::= Ident ;
EStr. Exp7  ::= String ;
ETrue. Exp7 ::= "true" ;
EFalse. Exp7 ::= "false" ;

Tbool. Type ::= "bool" ;
Tint.  Type ::= "int" ;
Tvoid. Type ::= "void"  ;
TStr.  Type ::= "String" ;
TFun.  Type ::= Function ;


coercions Exp 7 ;

